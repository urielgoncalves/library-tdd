// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechLibrary.Infrastructure;

namespace TechLibrary.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20200930000019_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("TechLibrary.Domain.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id", "ISBN");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = new Guid("340e1c1c-d88d-4c38-926c-6441164017fd"),
                            ISBN = "9781449331818",
                            Title = "Learning JavaScript Design Patterns"
                        },
                        new
                        {
                            Id = new Guid("d50a5fd3-c9b5-4b6e-9929-fc2d038689f7"),
                            ISBN = "9781491950296",
                            Title = "Programming JavaScript Applications"
                        });
                });

            modelBuilder.Entity("TechLibrary.Domain.Entities.LoanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("TechLibrary.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Email");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c222943c-53a1-47ad-a8db-5b8137f10f60"),
                            Active = true,
                            Email = "test@test.com",
                            Name = "User 1"
                        });
                });

            modelBuilder.Entity("TechLibrary.Domain.Entities.LoanEntity", b =>
                {
                    b.HasOne("TechLibrary.Domain.Entities.BookEntity", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechLibrary.Domain.Entities.UserEntity", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
